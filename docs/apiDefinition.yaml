openapi: 3.0.2
info:
  contact:
    name: Gema Martin
    email: gema.m2@gmail.com
  title: Restaurants API
  version: v1  
servers:
  - url: http://localhost:8086/restaurants-api/v1
    description: local server
  - url: https://restaurant-api-mngr.azure-api.net/restaurants-api/v1
    description: production server

paths:
  /restaurants:
    get:
      summary: Get restaurant list
      description: >
        Retrieve the list of existing restaurants
      tags:
        - RESTAURANTS
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
      responses:
        '200':
          description: Partial Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestaurantModel'  
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'   
        default:
          $ref: '#/components/responses/server_error_response'
    post:
      tags:
        - RESTAURANTS
      summary: Create restaurant
      description: Create a new restaurant
      security:
        - OAuth2:
            - adminrole
            - restrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
      requestBody:
        description: The information of the restaurant.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantRequestModel'
              description: The information of the restaurant.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantModel'
        '400':
          $ref: '#/components/responses/bad_request_response'  
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'     
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}:
    get:
      tags:
        - RESTAURANTS
      summary: Get restaurant
      description: Get restaurant by Id
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantModel'
        '400':
          $ref: '#/components/responses/bad_request_response'  
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'     
        default:
          $ref: '#/components/responses/server_error_response'
    delete:
      summary: Delete restaurant
      description: >
        Delete a restaurant given its identifier
      security:
        - OAuth2:
            - adminrole
            - restrole
      tags:
        - RESTAURANTS
      parameters:
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/bad_request_response' 
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'      
        '404':
          $ref: '#/components/responses/not_found_response'
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}/reviews:
    get:
      tags:
        - REVIEWS
      summary: Get reviews
      description: Get a list of reviews for a restaurant
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewModel'
        '400':
          $ref: '#/components/responses/bad_request_response' 
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response' 
        '404':
          $ref: '#/components/responses/not_found_response'          
        default:
          $ref: '#/components/responses/server_error_response'
    post:
      tags:
        - REVIEWS
      summary: Create review
      description: Create a restaurant review
      security:
        - OAuth2:
            - adminrole
            - custrole
      parameters:
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
      requestBody:
        description: The information of the restaurant.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequestModel'
              description: The information of the review.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewModel'
        '400':
          $ref: '#/components/responses/bad_request_response'  
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'          
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}/reviews/{reviewId}:
    get:
      tags:
        - REVIEWS
      summary: Get restaurant review
      description: Get restaurant review by Id
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - name: reviewId
          in: path
          description: The review identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The review identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewModel'
        '400':
          $ref: '#/components/responses/bad_request_response'  
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'     
        default:
          $ref: '#/components/responses/server_error_response'
    put:
      tags:
        - REVIEWS
      summary: Update restaurant review
      description: Update restaurant review by Id
      security:
        - OAuth2:
            - adminrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - name: reviewId
          in: path
          description: The review identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The review identifier.
      requestBody:
        description: The information of the review.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequestModel'
              description: The information of the review.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewModel'
        '400':
          $ref: '#/components/responses/bad_request_response'  
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'     
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}/bookings:
    get:
      tags:
        - BOOKINGS
      summary: Get bookings of the restaurant
      description: Get booking list for the restaurant
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingModel'
        '400':
          $ref: '#/components/responses/bad_request_response'   
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'         
        default:
          $ref: '#/components/responses/server_error_response'
    post:
      tags:
        - BOOKINGS
      summary: Create booking
      description: Create a new booking for the restaurant
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
      requestBody:
        description: The information of the booking.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequestModel'
              description: The information of the booking.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingModel'
        '400':
          $ref: '#/components/responses/bad_request_response' 
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response' 
        '404':
          $ref: '#/components/responses/not_found_response'          
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}/bookings/{bookingId}:
    get:
      tags:
        - BOOKINGS
      summary: Get booking by id
      description: Get a booking by identifier for the restaurant
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - name: bookingId
          in: path
          description: The booking identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The booking identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/BookingModel'
        '400':
          $ref: '#/components/responses/bad_request_response'
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'            
        default:
          $ref: '#/components/responses/server_error_response'
    delete:
      summary: Delete restaurant booking
      description: >
        Delete a restaurant booking given its identifier
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      tags:
        - BOOKINGS
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
          required: true
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
          required: true
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - name: bookingId
          in: path
          description: The booking identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The booking identifier.
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/bad_request_response'   
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'    
        '404':
          $ref: '#/components/responses/not_found_response'
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}/menus:
    get:
      tags:
        - MENUS
      summary: Get menus of the restaurant
      description: Get menus list for the restaurant
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummaryMenuModel'
        '400':
          $ref: '#/components/responses/bad_request_response' 
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response'
        '404':
          $ref: '#/components/responses/not_found_response'           
        default:
          $ref: '#/components/responses/server_error_response'
  /restaurants/{restaurantId}/menus/{menuId}:
    get:
      tags:
        - MENUS
      summary: Get a menu of the restaurant
      description: Get a menu of the restaurant by id
      security:
        - OAuth2:
            - adminrole
            - restrole
            - custrole
      parameters:
        - in: header
          name: x-role
          description: custom header with user role
          schema:
            type: string
            maxLength: 50
        - in: header
          name: x-username
          description: custom header with user name
          schema:
            type: string
            maxLength: 50
        - name: restaurantId
          in: path
          description: The restaurant identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The restaurant identifier.
        - name: menuId
          in: path
          description: The menu identifier.
          required: true
          schema:
            type: string
            format: uuid
            description: The menu identifier.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/MenuModel'
        '400':
          $ref: '#/components/responses/bad_request_response' 
        '401':
          $ref: '#/components/responses/unauthorized_error_response' 
        '403':
          $ref: '#/components/responses/forbidden_error_response' 
        '404':
          $ref: '#/components/responses/not_found_response'           
        default:
          $ref: '#/components/responses/server_error_response'
components:
  schemas:
    RestaurantRequestModel:
      required:
        - name
        - address
        - city
        - phone
      type: object
      properties:
        name:
          type: string
          description: The name of the restaurant.
          maxLength: 100
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          example: 'Red Lobster'
        address:
          type: string
          description: The address of the restaurant.
          maxLength: 100
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          example: 'Calle Alcala, 54'
        zipcode:
          type: string
          description: The zipcode.
          pattern: '^[0-9]*$'
          minLength: 5
          maxLength: 5
          example: "28925"
        city:
          type: string
          description: The city.
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          maxLength: 50
          example: "Madrid"
        province:
          type: string
          description: Province or region of the restaurant
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          maxLength: 50
          example: "Madrid"
        country:
          type: string
          description: The country.
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          maxLength: 50
          example: "Spain"
        email:
          type: string
          description: The e-mail address of the restaurant.
          format: email
          pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
          example: "user@gmail.com"
          maxLength: 100
        website:
          type: string
          description: The web of the restaurant.
          maxLength: 120
          format: uri
          example: "www.mysite.com/restaurant1"
        phone:
          type: string
          description: The telephone number.
          pattern: '^[0-9]*$'
          minLength: 9
          maxLength: 13
          example: "627339911"
        description:
          type: string
          description: 'Description of the restaurant.'
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          maxLength: 200
          example: "The restaurant covers the whole ground floor and is organizaed in two dining rooms"
        foodType:
          type: string
          description: The type of food that is served in the restaurant.
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          maxLength: 50
          example: "Mediterranean food"
        averageAmountPerPerson:
          type: number
          description: The average amount per person in the restaurant in euros.
          format: double
          example: 35
    RestaurantModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The restaurant identifier.
        name:
          type: string
          description: The name of the restaurant.
        address:
          type: string
          description: The address of the restaurant.
        zipcode:
          type: string
          description: The zipcode.
        city:
          type: string
          description: The city.
        province:
          type: string
          description: Province or region of the restaurant
        country:
          type: string
          description: The country.
        email:
          type: string
          description: The e-mail address of the restaurant.
        website:
          type: string
          description: The web of the restaurant.
        phone:
          type: string
          description: The telephone number.
        description:
          type: string
          description: 'Description of the restaurant.'
        foodType:
          type: string
          description: The type of food that is served in the restaurant.
        averageAmountPerPerson:
          type: number
          description: The average amount per person in the restaurant.
          format: double
    ReviewRequestModel:
      required:
        - senderNick
        - stars
      type: object
      properties:
        senderNick:
          type: string
          description: The nick from review creator.
          pattern: '^[a-zA-Z0-9]*$'
          maxLength: 50
          example: "user0089"
        stars:
          type: integer
          description: The given stars from 1 (bad) to 5 (great).
          format: int32
          enum:
           - 1
           - 2
           - 3
           - 4
           - 5
        title:
          type: string
          description: The title of the review.
          maxLength: 150
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          example: "This is a review title example"
        description:
          type: string
          description: The review description
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          maxLength: 500
          example: "This is a review text example"
    ReviewModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The identifier of the review.
        creationDate:
          type: string
          description: The date and time the review was created.
          format: date-time
        senderNick:
          type: string
          description: The nick from review creator.
        stars:
          type: integer
          description: The given stars from 1 (bad) to 5 (great).
          format: int32
        title:
          type: string
          description: The title of the review.
        description:
          type: string
          description: The review description.
    BookingRequestModel:
      required:
        - bookingDate
        - numberOfPeople
        - name
        - phone
      type: object
      properties:
        bookingDate:
          type: string
          description: "The date and time of the booking."
          format: date-time
          example: "2021-01-28T15:09:45.217"
        numberOfPeople:
          type: integer
          description: The number of people that the booking consists of.
          minimum: 1
          maximum: 50
          format: int32
          example: 3
        name:
          maxLength: 100
          type: string
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          description: The first name of the person making the reservation.
          example: "Luis Garcia"
        phone:
          type: string
          description: The phone number of the person making the reservation.
          pattern: '^[0-9]*$'
          minLength: 9
          maxLength: 13
          example: "627339911"
        email:
          maxLength: 100
          type: string
          description: The email address of the person making the reservation.
          format: email
          pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
          example: "user@gmail.com"
        comments:
          maxLength: 500
          pattern: '^[\.a-zA-Z0-9,!? ]*$'
          type: string
          description: The comments of the person making the reservation.
          example: "I would like to have a table near the window"
      description: Model to create a booking
    BookingModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The identifier of the booking.
        creationDate:
          type: string
          description: The date and time the booking was created.
          format: date-time
        bookingDate:
          type: string
          description: The date and time of the booking.
          format: date-time
        numberOfPeople:
          type: integer
          description: The number of people for the booking.
          format: int32
        name:
          type: string
          description: The name of the person making the reservation.
        phone:
          type: string
          description: The phone of the person making the reservation.
        email:
          type: string
          description: The email of the person making the reservation.
        comments:
          type: string
          description: The comments of the person making the reservation.
    SummaryMenuModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The identifier of the booking.
        description:
          type: string
          description: The description of the menu.
        availability:
          type: string
          description: The time when the menu is available.
    MenuModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The identifier of the Menu.
        description:
          type: string
          maxLength: 100
          description: The description of the menu.
        availability:
          type: string
          maxLength: 50
          description: The time when the menu is available.
        dishes:
          type: array
          items:
              $ref: '#/components/schemas/DishModel'
    DishModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The identifier of the dish.
          example: 3
        description:
          type: string
          description: The description of the menu.
          maxLength: 200
          example: "Dinner menu"
        isVegetarian:
          type: boolean
          description: This plate is suitable for vegetarians.   
          example: true
    error_response:
      type: object
      description: 'Error object'
      properties:
        code:
          type: string
          description: Service-specific error code/keyword
          example: INVALID_REQUEST
        message:
          type: string
          description: A brief message describing the result of the request.
          example: Some parameters in request are invalid.
          maxLength: 256
        severity:
          type: string
          enum: [ 'critical', 'error', 'warning', 'info' ]
          example: 'critical'
      required:
      - code
      - message
  responses:
    bad_request_response:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
          example:
            code: INVALID_REQUEST
            message: Bad Request. Invalid parameters in request.
            severity: 'error'
    not_found_response:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
          example:
            code: RESTAURANT_NOT_FOUND
            message: Not found restaurant with id 23
            severity: 'error'
    server_error_response:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
          example:
            code: SERVER_ERROR
            message:  Internal Server Error. We're sorry. Something went wrong on the server
            severity: 'critical'
    unauthorized_error_response:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
          example:
            code: UNAUTHORIZED
            message:  Not authorized.
            severity: 'critical'
    forbidden_error_response:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_response'
          example:
            code: FORBIDDEN
            message:  Forbidden access to the resource
            severity: 'critical'
  securitySchemes:             
    OpenID:
        type: openIdConnect
        openIdConnectUrl: https://example.com/.well-known/openid-configuration
    OAuth2:
        type: oauth2
        flows:
          authorizationCode:
            authorizationUrl: https://example.com/oauth/authorize
            tokenUrl: https://example.com/oauth/token
            scopes:
              aminrole: Grants access to all operations
              restrole: Grants access to restrole operations
              custrole: Grants access custrole operations